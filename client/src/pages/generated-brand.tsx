import { useState, useEffect } from "react";
import { Header } from "@/components/header";
import { Footer } from "@/components/footer";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { Download, Share2, Edit, ArrowLeft, Palette, Copy, RefreshCw, Sparkles } from "lucide-react";
import { useLocation } from "wouter";
import type { GeneratedContent } from "@shared/schema";
import { generateTemplatedContent } from "@/lib/brand-templates";
import type { TemplateType } from "@/lib/brand-templates";

export default function GeneratedBrand() {
  const [location, navigate] = useLocation();
  const { toast } = useToast();
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [originalIdea, setOriginalIdea] = useState<string>("");
  const [originalTemplateType, setOriginalTemplateType] = useState<string>("general");
  const [isLoading, setIsLoading] = useState(true);
  const [isRegenerating, setIsRegenerating] = useState(false);
  const [regenerationCount, setRegenerationCount] = useState(0);
  
  useEffect(() => {
    // Retrieve the generated content and original inputs from localStorage
    const storedContent = localStorage.getItem("generatedContent");
    const storedIdea = localStorage.getItem("originalIdea");
    const storedTemplateType = localStorage.getItem("originalTemplateType");
    
    if (storedContent) {
      try {
        const parsedContent = JSON.parse(storedContent);
        setGeneratedContent(parsedContent);
        
        // Store the original idea and template type for regeneration
        if (storedIdea) setOriginalIdea(storedIdea);
        if (storedTemplateType) setOriginalTemplateType(storedTemplateType);
      } catch (err) {
        console.error("Failed to parse stored content:", err);
      }
    }
    
    setIsLoading(false);
  }, []);
  
  // Function to regenerate the brand content with a different template
  const handleRegenerate = () => {
    if (!originalIdea) {
      toast({
        title: "Cannot regenerate",
        description: "Original idea information is missing. Please go back and create a new brand.",
        variant: "destructive",
      });
      return;
    }
    
    setIsRegenerating(true);
    
    try {
      // Generate new content with a different template
      // Exclude the current template to ensure we get a different one
      const currentTemplateId = generatedContent?.templateId as TemplateType | undefined;
      const excludeTemplateId = currentTemplateId || undefined;
      
      // Generate new content
      const newContent = generateTemplatedContent(originalIdea, originalTemplateType);
      
      // Store the new generated content
      localStorage.setItem("generatedContent", JSON.stringify(newContent));
      
      // Update the state
      setGeneratedContent(newContent);
      setRegenerationCount(prev => prev + 1);
      
      toast({
        title: "Brand regenerated!",
        description: `Your brand has been refreshed with the "${newContent.templateName}" template.`,
      });
    } catch (err) {
      console.error("Failed to regenerate content:", err);
      toast({
        title: "Regeneration failed",
        description: "An error occurred while creating a new brand variation.",
        variant: "destructive",
      });
    } finally {
      setIsRegenerating(false);
    }
  };
  
  const handleShare = async () => {
    try {
      // In a real implementation, this would generate a unique URL
      const shareableUrl = window.location.origin + "/shared-brand?id=123456";
      
      if (navigator.share) {
        await navigator.share({
          title: `${generatedContent?.headline || "Brand Page"} - Generated by BrandForge`,
          text: "Check out this brand page I created with BrandForge!",
          url: shareableUrl,
        });
      } else {
        // Fallback to copying the URL to clipboard
        await navigator.clipboard.writeText(shareableUrl);
        toast({
          title: "Link copied!",
          description: "Share this link with others to show your brand page.",
        });
      }
    } catch (err) {
      console.error("Error sharing:", err);
    }
  };
  
  const handleExport = () => {
    // In a real implementation, this would generate a PDF or HTML file
    toast({
      title: "Export initiated",
      description: "Your brand page is being prepared for download.",
    });
    
    // Simulate a download delay
    setTimeout(() => {
      toast({
        title: "Export complete!",
        description: "Your brand page has been downloaded.",
      });
    }, 2000);
  };
  
  const handleEdit = () => {
    navigate("/describe-idea");
  };
  
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
        <div className="text-center">
          <div className="inline-block w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mb-4"></div>
          <p className="text-slate-600 dark:text-slate-300">Loading your brand page...</p>
        </div>
      </div>
    );
  }
  
  if (!generatedContent) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
        <Header />
        
        <main className="pt-24 pb-16">
          <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <h1 className="text-3xl font-bold text-slate-900 dark:text-white mb-6">
              No Brand Page Found
            </h1>
            <p className="text-slate-600 dark:text-slate-300 mb-8">
              It looks like you haven't generated a brand page yet, or the session has expired.
            </p>
            <Button 
              onClick={() => navigate("/describe-idea")}
              className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white"
              size="lg"
            >
              Create a Brand Page
            </Button>
          </div>
        </main>
        
        <Footer />
      </div>
    );
  }
  
  // Determine text color based on the first color in the palette
  const isDarkColor = (color: string) => {
    // Convert hex to RGB
    const hex = color.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // Calculate brightness (perceived)
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    
    // Return true if the color is dark
    return brightness < 128;
  };
  
  const primaryColor = generatedContent.colorPalette[0];
  const secondaryColor = generatedContent.colorPalette[1];
  const accentColor = generatedContent.colorPalette[2];
  
  const textColor = isDarkColor(primaryColor) ? 'white' : 'black';
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      <Header />
      
      <div className="fixed bottom-6 right-6 z-40 flex flex-col space-y-4">
        <Button
          variant="outline"
          size="icon"
          className="h-12 w-12 rounded-full bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 shadow-lg hover:shadow-xl transition-all"
          onClick={handleEdit}
        >
          <Edit className="h-5 w-5 text-slate-600 dark:text-slate-300" />
          <span className="sr-only">Edit</span>
        </Button>
        
        <Button
          variant="outline"
          size="icon"
          className="h-12 w-12 rounded-full bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 shadow-lg hover:shadow-xl transition-all"
          onClick={handleRegenerate}
          disabled={isRegenerating}
        >
          <RefreshCw className={`h-5 w-5 text-slate-600 dark:text-slate-300 ${isRegenerating ? 'animate-spin' : ''}`} />
          <span className="sr-only">Regenerate</span>
        </Button>
        
        <Button
          variant="outline"
          size="icon"
          className="h-12 w-12 rounded-full bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 shadow-lg hover:shadow-xl transition-all"
          onClick={handleShare}
        >
          <Share2 className="h-5 w-5 text-slate-600 dark:text-slate-300" />
          <span className="sr-only">Share</span>
        </Button>
        
        <Button
          variant="outline"
          size="icon"
          className="h-12 w-12 rounded-full bg-white dark:bg-slate-800 border-slate-200 dark:border-slate-700 shadow-lg hover:shadow-xl transition-all"
          onClick={handleExport}
        >
          <Download className="h-5 w-5 text-slate-600 dark:text-slate-300" />
          <span className="sr-only">Export</span>
        </Button>
      </div>
      
      <div className="pt-16 pb-4 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <Button
            variant="ghost"
            className="mb-4 text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white"
            onClick={() => navigate("/")}
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Button>
          
          <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
            <div>
              <h1 className="text-2xl font-bold text-slate-900 dark:text-white mb-1">
                Your Generated Brand Page
              </h1>
              {generatedContent.templateName && (
                <div className="flex items-center text-sm text-slate-500 dark:text-slate-400">
                  <span>Template: </span>
                  <span className="font-medium ml-1">{generatedContent.templateName}</span>
                  {regenerationCount > 0 && (
                    <span className="ml-2 text-xs bg-slate-100 dark:bg-slate-700 px-2 py-0.5 rounded-full">
                      Version {regenerationCount + 1}
                    </span>
                  )}
                </div>
              )}
            </div>
            
            <div className="flex items-center space-x-3">
              <Button
                variant="outline"
                size="sm"
                className="flex items-center gap-1 border-slate-200 dark:border-slate-700"
                onClick={handleRegenerate}
                disabled={isRegenerating}
              >
                <RefreshCw className={`h-4 w-4 ${isRegenerating ? 'animate-spin' : ''}`} />
                {isRegenerating ? 'Generating...' : 'More Options'}
              </Button>
              
              <div className="flex items-center space-x-2">
                <Palette className="h-5 w-5 text-slate-500 dark:text-slate-400" />
                <div className="flex space-x-2">
                  {generatedContent.colorPalette.map((color, index) => (
                    <div 
                      key={index}
                      className="h-6 w-6 rounded-full border border-slate-200 dark:border-slate-700 cursor-pointer"
                      style={{ backgroundColor: color }}
                      onClick={() => {
                        navigator.clipboard.writeText(color);
                        toast({
                          title: "Color copied!",
                          description: `${color} has been copied to your clipboard.`
                        });
                      }}
                      title={color}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Generated Brand Page */}
      <div 
        className="w-full pb-16"
        style={{ backgroundColor: primaryColor }}
      >
        <div className="max-w-7xl mx-auto">
          {/* Hero Section */}
          <section className="py-16 md:py-24 px-4 sm:px-6 lg:px-8">
            <div className="max-w-4xl mx-auto text-center">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
              >
                <div className="mb-6 flex justify-center">
                  <div className="h-16 w-16 rounded-xl flex items-center justify-center" style={{ backgroundColor: accentColor }}>
                    <span className="text-2xl">{generatedContent.emojiStyle.split('').slice(0, 1)}</span>
                  </div>
                </div>
                
                <h1 
                  className="text-4xl md:text-6xl font-bold mb-6"
                  style={{ color: textColor }}
                >
                  {generatedContent.headline}
                </h1>
                
                <p 
                  className="text-xl md:text-2xl mb-8"
                  style={{ color: textColor === 'white' ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.8)' }}
                >
                  {generatedContent.subheadline}
                </p>
                
                <Button 
                  size="lg"
                  className="text-lg px-8 py-6 rounded-lg"
                  style={{ 
                    backgroundColor: accentColor,
                    color: isDarkColor(accentColor) ? 'white' : 'black'
                  }}
                >
                  {generatedContent.cta}
                </Button>
              </motion.div>
            </div>
          </section>
          
          {/* Features Section */}
          <section 
            className="py-16 px-4 sm:px-6 lg:px-8 rounded-t-3xl"
            style={{ backgroundColor: 'white' }}
          >
            <div className="max-w-7xl mx-auto">
              <div className="text-center mb-16">
                <h2 className="text-3xl md:text-4xl font-bold text-slate-900 mb-4">
                  Why Choose Us
                </h2>
                <p className="text-lg text-slate-600 max-w-2xl mx-auto">
                  Discover what makes our solution the perfect fit for your needs
                </p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                {generatedContent.features.map((feature, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-slate-50 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow"
                  >
                    <div 
                      className="w-12 h-12 rounded-lg mb-4 flex items-center justify-center"
                      style={{ backgroundColor: secondaryColor }}
                    >
                      <span className="text-xl">
                        {generatedContent.emojiStyle.split('')[index] || '✨'}
                      </span>
                    </div>
                    
                    <h3 className="text-xl font-semibold text-slate-900 mb-3">
                      {feature.title}
                    </h3>
                    
                    <p className="text-slate-600">
                      {feature.description}
                    </p>
                  </motion.div>
                ))}
              </div>
            </div>
          </section>
          
          {/* Call to Action Section */}
          <section className="py-16 px-4 sm:px-6 lg:px-8 bg-slate-50">
            <div className="max-w-4xl mx-auto text-center">
              <h2 className="text-3xl font-bold text-slate-900 mb-6">
                Ready to Get Started?
              </h2>
              <p className="text-lg text-slate-600 mb-8">
                Join thousands of satisfied customers who have transformed their business with our solution.
              </p>
              <div className="flex flex-col sm:flex-row justify-center gap-4">
                <Button 
                  size="lg"
                  className="text-lg"
                  style={{ 
                    backgroundColor: accentColor,
                    color: isDarkColor(accentColor) ? 'white' : 'black'
                  }}
                >
                  {generatedContent.cta}
                </Button>
                
                <Button 
                  variant="outline"
                  size="lg"
                  className="text-lg border-slate-300"
                >
                  Learn More
                </Button>
              </div>
            </div>
          </section>
          
          {/* Brand Information */}
          <section className="py-16 px-4 sm:px-6 lg:px-8 bg-white">
            <div className="max-w-4xl mx-auto">
              <div className="bg-slate-50 rounded-xl p-6 md:p-8 shadow-sm">
                <h3 className="text-xl font-semibold text-slate-900 mb-4">
                  Brand Information
                </h3>
                
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-slate-500 mb-1">Brand Tone</p>
                    <p className="text-slate-900">{generatedContent.brandTone}</p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-slate-500 mb-1">Emoji Style</p>
                    <p className="text-slate-900 text-2xl">{generatedContent.emojiStyle}</p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-slate-500 mb-1">Color Palette</p>
                    <div className="flex space-x-2 mt-2">
                      {generatedContent.colorPalette.map((color, index) => (
                        <div 
                          key={index}
                          className="relative group"
                        >
                          <div 
                            className="h-10 w-10 rounded-md border border-slate-200 cursor-pointer"
                            style={{ backgroundColor: color }}
                            onClick={() => {
                              navigator.clipboard.writeText(color);
                              toast({
                                title: "Color copied!",
                                description: `${color} has been copied to your clipboard.`,
                              });
                            }}
                          />
                          <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-slate-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                            {color}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
                
                <div className="mt-6 pt-6 border-t border-slate-200">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-slate-600 hover:text-slate-900"
                    onClick={() => {
                      const brandInfo = `
Brand Headline: ${generatedContent.headline}
Subheadline: ${generatedContent.subheadline}
Features:
${generatedContent.features.map(f => `- ${f.title}: ${f.description}`).join('\n')}
CTA: ${generatedContent.cta}
Brand Tone: ${generatedContent.brandTone}
Emoji Style: ${generatedContent.emojiStyle}
Color Palette: ${generatedContent.colorPalette.join(', ')}
                      `;
                      
                      navigator.clipboard.writeText(brandInfo);
                      toast({
                        title: "Brand info copied!",
                        description: "All brand information has been copied to your clipboard.",
                      });
                    }}
                  >
                    <Copy className="h-4 w-4 mr-2" />
                    Copy All Brand Info
                  </Button>
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
      
      <Footer />
    </div>
  );
}
