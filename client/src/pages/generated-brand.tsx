import { useState, useEffect } from "react";
import { Header } from "@/components/header";
import { Footer } from "@/components/footer";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { useToast } from "@/hooks/use-toast";
import { Download, Share2, Edit, ArrowLeft, Palette, Copy, RefreshCw, Sparkles, Lock, Eye } from "lucide-react";
import { useLocation } from "wouter";
import type { GeneratedContent } from "@shared/schema";
import { generateBrandWithRealTemplate } from "@/lib/template-integration";
import { isTemplateUnlocked, unlockTemplate } from "@/lib/user-account";
import { PaymentModal } from "@/components/payment-modal";
import { TemplatePreview } from "@/components/template-preview";

export default function GeneratedBrand() {
  const [location, navigate] = useLocation();
  const { toast } = useToast();
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null);
  const [originalIdea, setOriginalIdea] = useState<string>("");
  const [originalTemplateType, setOriginalTemplateType] = useState<string>("general");
  const [isLoading, setIsLoading] = useState(true);
  const [isRegenerating, setIsRegenerating] = useState(false);
  const [regenerationCount, setRegenerationCount] = useState(0);
  const [paymentTemplateId, setPaymentTemplateId] = useState<string | null>(null);
  const [previewTemplateId, setPreviewTemplateId] = useState<string | null>(null);
  
  useEffect(() => {
    // Retrieve the generated content and original inputs from localStorage
    const storedContent = localStorage.getItem("generatedContent");
    const storedIdea = localStorage.getItem("originalIdea");
    const storedTemplateType = localStorage.getItem("originalTemplateType");
    
    if (storedContent) {
      try {
        const parsedContent = JSON.parse(storedContent);
        setGeneratedContent(parsedContent);
        
        // Store the original idea and template type for regeneration
        if (storedIdea) setOriginalIdea(storedIdea);
        if (storedTemplateType) setOriginalTemplateType(storedTemplateType);
      } catch (err) {
        console.error("Failed to parse stored content:", err);
      }
    }
    
    setIsLoading(false);
  }, []);
  
  // Function to regenerate the brand content with a different template
  const handleRegenerate = async () => {
    if (!originalIdea) {
      toast({
        title: "Cannot regenerate",
        description: "Original idea data is missing. Please go back and start over.",
        variant: "destructive"
      });
      return;
    }
    
    setIsRegenerating(true);
    setRegenerationCount(prev => prev + 1);
    
    try {
      const newContent = await generateBrandWithRealTemplate(
        originalIdea,
        originalTemplateType || "general"
      );
      
      if (newContent) {
        setGeneratedContent(newContent);
        localStorage.setItem("generatedContent", JSON.stringify(newContent));
        
        toast({
          title: "Brand regenerated!",
          description: "Your brand has been regenerated with a new template."
        });
      }
    } catch (error) {
      console.error("Failed to regenerate brand:", error);
      toast({
        title: "Regeneration failed",
        description: "Failed to regenerate your brand. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsRegenerating(false);
    }
  };
  
  // Function to handle going back to the idea description page
  const handleGoBack = () => {
    navigate("/describe-idea");
  };
  
  // Function to handle sharing the generated brand
  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: `${generatedContent?.brandName || 'Brand'} - Generated by Brand Forge`,
        text: `Check out this brand I created with Brand Forge: ${generatedContent?.headline}`,
        url: window.location.href
      }).catch(err => {
        console.error("Share failed:", err);
      });
    } else {
      // Fallback for browsers that don't support the Web Share API
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link copied!",
        description: "The link to your brand has been copied to your clipboard."
      });
    }
  };
  
  // Function to handle downloading the template
  const handleDownload = async (templateId?: string) => {
    if (!templateId) return;
    
    // Check if the template is premium and not unlocked
    if (generatedContent?.isPremium && !isTemplateUnlocked(templateId)) {
      // Show payment modal
      setPaymentTemplateId(templateId);
      return;
    }
    
    // Proceed with download
    try {
      toast({
        title: "Download started",
        description: "Your template is being prepared for download."
      });
      
      // Call the API endpoint to download the template
      const isPremium = generatedContent?.isPremium || false;
      const hasAccess = isTemplateUnlocked(templateId);
      
      // Create download link
      const downloadUrl = `/api/download-template?id=${templateId}&premium=${isPremium}&access=${hasAccess}`;
      
      // Create a temporary link element and trigger the download
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.setAttribute('download', `${templateId}.zip`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({
        title: "Download initiated",
        description: "Your template download has started."
      });
    } catch (error) {
      console.error("Download failed:", error);
      toast({
        title: "Download failed",
        description: "Failed to download the template. Please try again.",
        variant: "destructive"
      });
    }
  };
  
  // Function to handle previewing the template
  const handlePreview = (templateId?: string) => {
    if (!templateId) return;
    setPreviewTemplateId(templateId);
  };
  
  // Function to handle payment completion
  const handlePaymentComplete = (templateId: string) => {
    setPaymentTemplateId(null);
    
    // Unlock the template
    unlockTemplate(templateId);
    
    toast({
      title: "Template unlocked!",
      description: "You can now download and use this template."
    });
    
    // Proceed with download
    handleDownload(templateId);
  };
  
  if (isLoading) {
    return (
      <div className="min-h-screen bg-slate-50 dark:bg-slate-900">
        <Header />
        <div className="container mx-auto px-4 py-16 flex flex-col items-center justify-center">
          <div className="animate-pulse space-y-4 w-full max-w-4xl">
            <div className="h-8 bg-slate-200 dark:bg-slate-700 rounded w-3/4 mx-auto"></div>
            <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded w-1/2 mx-auto"></div>
            <div className="h-64 bg-slate-200 dark:bg-slate-700 rounded"></div>
            <div className="h-32 bg-slate-200 dark:bg-slate-700 rounded"></div>
          </div>
        </div>
        <Footer />
      </div>
    );
  }
  
  // Determine text color based on the first color in the palette
  const isDarkColor = (color: string) => {
    // Convert hex to RGB
    const hex = color.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // Calculate brightness (perceived)
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    
    // Return true if the color is dark
    return brightness < 128;
  };
  
  const primaryColor = generatedContent?.colorPalette?.[0] || '#ffffff';
  const secondaryColor = generatedContent?.colorPalette?.[1] || '#f0f0f0';
  const accentColor = generatedContent?.colorPalette?.[2] || '#e0e0e0';
  
  const textColor = isDarkColor(primaryColor) ? 'white' : 'black';
  
  if (!generatedContent) {
    return (
      <div className="min-h-screen bg-slate-50 dark:bg-slate-900">
        <Header />
        <div className="container mx-auto px-4 py-16 flex flex-col items-center justify-center">
          <div className="text-center">
            <h1 className="text-3xl font-bold mb-4">No Brand Generated</h1>
            <p className="mb-8">It seems you haven't generated a brand yet or the data was lost.</p>
            <Button onClick={handleGoBack}>Create a Brand</Button>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      {/* Action Bar */}
      <div className="bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 sticky top-0 z-10">
        <div className="container mx-auto px-4 py-3">
          <div className="flex justify-between items-center">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleGoBack}
              className="text-slate-600 dark:text-slate-400"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </Button>
            
            <div className="flex items-center space-x-2">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleShare}
                className="text-slate-600 dark:text-slate-400"
              >
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
              
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleRegenerate}
                className="text-slate-600 dark:text-slate-400"
                disabled={isRegenerating}
              >
                <RefreshCw className={`h-4 w-4 mr-2 ${isRegenerating ? 'animate-spin' : ''}`} />
                {isRegenerating ? 'Regenerating...' : 'Regenerate'}
              </Button>
              
              {generatedContent.templateId && (
                <div className="flex items-center gap-2">
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => handlePreview(generatedContent.templateId)}
                  >
                    <Eye className="h-4 w-4 mr-1" />
                    Preview
                  </Button>
                  
                  <Button 
                    size="sm" 
                    className={`flex items-center gap-1 ${!generatedContent.isPremium || isTemplateUnlocked(generatedContent.templateId) ? 'bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700' : ''}`}
                    onClick={() => handleDownload(generatedContent.templateId)}
                  >
                    {generatedContent.isPremium && !isTemplateUnlocked(generatedContent.templateId) ? (
                      <>
                        <Lock className="h-4 w-4" />
                        Unlock Template
                      </>
                    ) : (
                      <>
                        <Download className="h-4 w-4" />
                        Download Template
                      </>
                    )}
                  </Button>
                </div>
              )}
            </div>
            
            <div className="flex items-center space-x-2">
              <Palette className="h-5 w-5 text-slate-500 dark:text-slate-400" />
              <div className="flex space-x-2">
                {generatedContent?.colorPalette?.map((color, index) => (
                  <div 
                    key={index}
                    className="h-6 w-6 rounded-full border border-slate-200 dark:border-slate-700 cursor-pointer"
                    style={{ backgroundColor: color }}
                    onClick={() => {
                      navigator.clipboard.writeText(color);
                      toast({
                        title: "Color copied!",
                        description: `${color} has been copied to your clipboard.`
                      });
                    }}
                    title={color}
                  />
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Generated Brand Page */}
      <div 
        className="w-full pb-16"
        style={{ backgroundColor: primaryColor }}
      >
        <div className="max-w-7xl mx-auto">
          {/* Hero Section */}
          <section className="py-16 md:py-24 px-4 sm:px-6 lg:px-8">
            <div className="max-w-4xl mx-auto text-center">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
              >
                <div className="mb-6 flex justify-center">
                  <div className="h-16 w-16 rounded-xl flex items-center justify-center" style={{ backgroundColor: accentColor }}>
                    <span className="text-2xl">{generatedContent?.emojiStyle?.split('').slice(0, 1)}</span>
                  </div>
                </div>
                
                <h1 
                  className="text-4xl md:text-6xl font-bold mb-6"
                  style={{ color: textColor }}
                >
                  {generatedContent.headline}
                </h1>
                
                <p 
                  className="text-xl md:text-2xl mb-12 max-w-3xl mx-auto"
                  style={{ color: textColor }}
                >
                  {generatedContent.subheadline}
                </p>
                
                <Button 
                  size="lg" 
                  className="rounded-full px-8 py-6 text-lg"
                  style={{ 
                    backgroundColor: accentColor,
                    color: isDarkColor(accentColor) ? 'white' : 'black'
                  }}
                >
                  {generatedContent.cta}
                </Button>
              </motion.div>
            </div>
          </section>
          
          {/* Features Section */}
          <section className="py-16 px-4 sm:px-6 lg:px-8 bg-white dark:bg-slate-900 rounded-t-3xl">
            <div className="max-w-7xl mx-auto">
              <div className="text-center mb-16">
                <h2 className="text-3xl md:text-4xl font-bold mb-4">Key Features</h2>
                <p className="text-lg text-slate-600 dark:text-slate-400 max-w-2xl mx-auto">
                  Discover what makes {generatedContent.brandName || 'our product'} stand out from the competition.
                </p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {generatedContent.features.map((feature, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.4, delay: index * 0.1 }}
                    className="bg-slate-50 dark:bg-slate-800 p-6 rounded-xl"
                  >
                    <div className="mb-4 h-12 w-12 rounded-lg flex items-center justify-center" style={{ backgroundColor: secondaryColor }}>
                      <Sparkles className="h-6 w-6" style={{ color: isDarkColor(secondaryColor) ? 'white' : 'black' }} />
                    </div>
                    <h3 className="text-xl font-bold mb-2">{feature.title}</h3>
                    <p className="text-slate-600 dark:text-slate-400">{feature.description}</p>
                  </motion.div>
                ))}
              </div>
            </div>
          </section>
        </div>
      </div>
      
      <Footer />
      
      {/* Payment Modal */}
      {paymentTemplateId && (
        <PaymentModal
          isOpen={!!paymentTemplateId}
          onClose={() => setPaymentTemplateId(null)}
          onComplete={() => handlePaymentComplete(paymentTemplateId)}
          templateId={paymentTemplateId}
          templateName={generatedContent.templateName || 'Premium Template'}
        />
      )}
      
      {/* Template Preview */}
      {previewTemplateId && (
        <TemplatePreview
          templateId={previewTemplateId}
          onClose={() => setPreviewTemplateId(null)}
          onDownload={handleDownload}
          onUnlock={(templateId) => {
            setPreviewTemplateId(null);
            setPaymentTemplateId(templateId);
          }}
        />
      )}
    </div>
  );
}
